package com.boot.elasticsearch;

import co.elastic.clients.elasticsearch.ElasticsearchClient;
import co.elastic.clients.json.jackson.JacksonJsonpMapper;
import co.elastic.clients.transport.rest_client.RestClientTransport;
import org.apache.http.HttpHost;
import org.apache.http.Header;
import org.apache.http.message.BasicHeader;
import org.apache.http.ssl.SSLContexts;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.net.ssl.SSLContext;
import java.util.Base64;

@Configuration
public class ElasticsearchConfig {

    @Value("${spring.elasticsearch.uris}")
    private String elasticUri;

    @Value("${spring.elasticsearch.username}")
    private String username;

    @Value("${spring.elasticsearch.password}")
    private String password;

    @Bean
    public ElasticsearchClient elasticsearchClient() throws Exception {
        // 1. 인증서 검증 생략 (테스트용)
        SSLContext sslContext = SSLContexts.custom()
                .loadTrustMaterial(null, (cert, authType) -> true)
                .build();

        // 2. Basic 인증 헤더 구성
        String auth = Base64.getEncoder().encodeToString((username + ":" + password).getBytes());

        RestClientBuilder builder = RestClient.builder(HttpHost.create(elasticUri))
                .setHttpClientConfigCallback(httpClientBuilder ->
                        httpClientBuilder.setSSLContext(sslContext)
                                          .setSSLHostnameVerifier((hostname, session) -> true) // CN 무시
                )
                .setDefaultHeaders(new Header[] {
                        new BasicHeader("Authorization", "Basic " + auth)
                });

        // 3. ElasticsearchClient 생성
        RestClient restClient = builder.build();
        RestClientTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());
        return new ElasticsearchClient(transport);
    }
}
